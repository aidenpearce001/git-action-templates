name: CD

on:
  pull_request:
    branches: [deploy]
  workflow_dispatch:

permissions:
  security-events: write

jobs:
  docker-build:
    runs-on: ubuntu-latest

    outputs:
      docker_image: ${{ steps.docker-build.outputs.DOCKER_IMAGE }}

    strategy:
      matrix:
        config:
          - { region: "us-east-1", repository: "git-action-template" , repository-alias: "s9y4w8l4"}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region:  ${{ matrix.config.region }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and tag Docker
        id: docker-build
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: ${{ matrix.config.repository-alias }}
          REPOSITORY: ${{ matrix.config.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_NAME=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          echo "DOCKER_IMAGE=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
  
  Trivy-scan:
    needs: docker-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build.outputs.docker_image }}
          format: 'table'
          # output: 'trivy-results.sarif'
          ignore-unfixed: true
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: echo docker_image 
        run: echo ${{ needs.docker-build.outputs.docker_image }}
      
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: always()
      #   with:
      #     sarif_file: 'trivy-results.sarif'
      #     category: 'image'

  Deploy:
    needs: [docker-build,Trivy-scan]
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_IPV4_DNS }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # For authenticated pulls, you must authenticate your Docker
            aws ecr-public get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin public.ecr.aws

            # Pull Docker
            sudo docker pull ${{ needs.docker-build.outputs.docker_image }}

            # Stop and remove the old container if it exists
            sudo docker stop git-action-container || true
            sudo docker rm git-action-container || true

            # Run the new container
            sudo docker run -d --name git-action-container -p 8000:8000 ${{ needs.docker-build.outputs.docker_image }}

            # Optional: Clean up unused Docker images
            sudo docker image prune -f

  API-Tesing:
    needs: [Deploy]
    name: API Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: matt-ball/newman-action@master
        with:
          collection: postman/git-action-healthcheck.postman_collection_success.json
          environment: postman/git-action-env.postman_environment.json

  DAST:
    needs: [API-Tesing]
    runs-on: ubuntu-latest
    name: ZAP Scan
    steps:
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.8.0
        with:
          fail_action: false
          token: ${{ secrets.TOKEN_GITHUB }}
          issue_title: "ZAP Result"
          target: 'http://${{ secrets.PUBLIC_IPV4_DNS }}:8000'